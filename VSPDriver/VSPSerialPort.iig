// ********************************************************************
// VSPSerialPort - VSPSerialPort.iig
//
// Copyright © 2025 by EoF Software Labs
// Copyright © 2024 Apple Inc. (some copied parts)
// SPDX-License-Identifier: MIT
// ********************************************************************
#ifndef VSPSerialPort_h
#define VSPSerialPort_h

#include <Availability.h>
#include <DriverKit/IOService.iig>
#include <DriverKit/IODataQueueDispatchSource.iig>
#include <SerialDriverKit/IOUserSerial.iig>

class VSPSerialPort: public IOUserSerial
{
public:
    virtual bool init() override;
    virtual void free() override;
    
    virtual kern_return_t Start(IOService* provider) override;
    virtual kern_return_t Stop(IOService* provider) override;
    
    virtual void RxDataAvailable() override;
    virtual void TxDataAvailable() override;

    /* Async callback to get client TX data packets */
    virtual void TxPacketAvailable(OSAction* action) TYPE(IODataQueueDispatchSource::DataAvailable);

    virtual void TxFreeSpaceAvailable() override;
    virtual void RxFreeSpaceAvailable() override;
    
    virtual kern_return_t SetModemStatus(bool cts, bool dsr, bool ri, bool dcd) override;
    virtual kern_return_t RxError(bool overrun, bool gotBreak, bool framingError, bool parityError) override;
    
    virtual kern_return_t HwActivate() override;
    virtual kern_return_t HwDeactivate() override;
    
    virtual kern_return_t HwResetFIFO(bool tx, bool rx) override;
    virtual kern_return_t HwSendBreak(bool sendBreak) override;
    
    virtual kern_return_t HwGetModemStatus(bool* cts, bool* dsr, bool* ri, bool* dcd) override;
    virtual kern_return_t HwProgramUART(uint32_t baudRate, uint8_t nDataBits, uint8_t nHalfStopBits, uint8_t parity) override;
    virtual kern_return_t HwProgramBaudRate(uint32_t baudRate) override;
    virtual kern_return_t HwProgramMCR(bool dtr, bool rts) override;
    virtual kern_return_t HwProgramLatencyTimer(uint32_t latency) override;
    virtual kern_return_t HwProgramFlowControl(uint32_t arg, uint8_t xon, uint8_t xoff) override;

    // VSPDriver inrernals
    virtual void CleanupResources() LOCAL;
    virtual IOReturn SetupTTYBaseName() LOCAL;
    virtual IOReturn ConnectDriverQueues() LOCAL;
    virtual IOReturn CopyMemory(IOMemoryDescriptor* md, char* buffer, uint64_t size) LOCAL;
};


#endif /* VSPSerialPort_h */
